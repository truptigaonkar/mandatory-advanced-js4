{"version":3,"sources":["components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Circle","props","color","cell","circleStyle","backgroundColor","border","borderRadius","paddingTop","marginRight","react_default","a","createElement","style","Cell","height","width","onClick","handleClick","row","col","Board_Circle","Row","cells","i","push","Board_Cell","key","display","Board","rows","Board_Row","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Array","fill","state","player","winner","bind","assertThisInitialized","_this2","console","log","temp","newRow","findAvailableRow","length","unshift","slice","setState","checkVictory","changePlayer","checkVertical","checkHorizontal","checkDiagonalRight","checkDiagonalLeft","Card","body","inverse","CardHeader","fontSize","CardBody","components_Board","CardFooter","Button","size","active","handleReset","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d51bfe80.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Circle = (props) => {\r\n    let color = \"#006400\";\r\n    if(props.cell === 1){\r\n        color = \"yellow\"\r\n    } else if(props.cell === 2){\r\n        color = \"red\"\r\n    }\r\n    let circleStyle = {\r\n        backgroundColor: color,\r\n        border: \"green 1px solid\",\r\n        borderRadius: \"40%\",\r\n        paddingTop: \"90%\",\r\n        marginRight: \"10%\",\r\n    }\r\n    return(\r\n        <div style={circleStyle}></div>\r\n    )\r\n}\r\n\r\nconst Cell = (props) => {\r\n    // Cell styling\r\n    let cellStyle = {\r\n        height: 90,\r\n        width: 90,\r\n        //backgroundColor: \"#0074B3\", \r\n    }\r\n    //console.log(props.cell)\r\n    return (\r\n        <div style={cellStyle} onClick={() => props.handleClick(props.row, props.col)}>\r\n             <Circle cell={props.cell} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Row = (props) => {\r\n    // Row styling\r\n    let rowStyle = {\r\n        display: \"flex\"\r\n    }\r\n\r\n    // Dynamically add cells to array\r\n    let cells = []\r\n    for (let i = 0; i < 7; i++) {\r\n        cells.push(<Cell key={i} cell={props.cells[i]} row={props.row} col={i} handleClick={props.handleClick} />)\r\n    }\r\n    return (\r\n        <div style={rowStyle}>\r\n            {cells}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Board = (props) => {\r\n\r\n    // Dynamically add rows to array\r\n    let rows = [];\r\n    for (let i = 5; i >= 0; i--) {\r\n        rows.push(<Row key={i} row={i} cells={props.cells[i]} handleClick={props.handleClick} />)\r\n    }\r\n    //console.log(\"Board component: \", props.cells)\r\n    return (\r\n        <div className=\"App\">\r\n            {rows}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Board from './components/Board'\r\nimport { Button, Card, CardHeader, CardBody, CardFooter } from 'reactstrap';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // Dynamically add cells to table rows & fill with value=0 from array positions 0 to 6\r\n    let cells = []\r\n    for (let i = 0; i < 6; i++) {\r\n      cells.push(new Array(7).fill(0))\r\n    }\r\n    this.state = { cells, player: false, winner: 0 } // Same as 'this.state = { cells: cells }'\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  // Handling click event\r\n  handleClick(row, col) {\r\n    console.log(\"row: \" + row + \" | col: \" + col, this.state.cells[row][col])\r\n\t\tif (!this.state.cells[row][col] && !this.state.winner) {\r\n\t\t\tvar temp = [],\r\n\t\t\t\tnewRow = this.findAvailableRow(col)\r\n\t\t\tfor (let i = this.state.cells.length - 1; i >= 0; i--) {\r\n\t\t\t// for (let i = 0; i < 6; i++) {\r\n\t\t\t\ttemp.unshift( this.state.cells[i].slice(0) )\r\n\t\t\t}\r\n\t\t\ttemp[newRow][col] = this.state.player ? 1 : 2\r\n\t\t\tthis.setState({cells: temp, player: !this.state.player}, () => {\r\n\t\t\t\t// console.log('updated state:', this.state)\r\n\t\t\t\tif (this.checkVictory(newRow, col) > 0) {\r\n\t\t\t\t\tconsole.log(\"win\")\r\n\t\t\t\t\tthis.setState({winner: this.state.player ? 2 : 1})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n  }\r\n\r\n  findAvailableRow(col) {\r\n    for (let i = 0; i < 6; i++) {\r\n      if (this.state.cells[i][col] === 0) {\r\n        return i\r\n      }\r\n    }\r\n    return -1\r\n  }\r\n\r\n  // Vertical winning conditions\r\n  checkVertical(row, col) {\r\n    let cells = this.state.cells;\r\n    let changePlayer = this.state.player ? 2 : 1\r\n\r\n    if (row >= 3) {\r\n      if (cells[row][col] === changePlayer &&\r\n        cells[row - 1][col] === changePlayer &&\r\n        cells[row - 2][col] === changePlayer &&\r\n        cells[row - 3][col] === changePlayer) {\r\n        return 1\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  // Horizontal winning conditions\r\n  checkHorizontal(row, col) {\r\n    let cells = this.state.cells;\r\n    let i = 6;\r\n    let changePlayer = this.state.player ? 2 : 1;\r\n\r\n    while (i >= 3) {\r\n      if (cells[row][i] === changePlayer &&\r\n        cells[row][i - 1] === changePlayer &&\r\n        cells[row][i - 2] === changePlayer &&\r\n        cells[row][i - 3] === changePlayer) {\r\n        return 1\r\n      }\r\n      i--\r\n    }\r\n    return 0\r\n  }\r\n\r\n  // Diagonal Right winning conditions\r\n  checkDiagonalRight(row, col) {\r\n    let cell = this.state.cells\r\n    let changePlayer = this.state.player ? 2 : 1\r\n    while (row < 5 && col < 6) {\r\n      row++\r\n      col++\r\n    }\r\n\r\n    while (row >= 3 && col >= 3) {\r\n      if (cell[row][col] === changePlayer &&\r\n        cell[row - 1][col - 1] === changePlayer &&\r\n        cell[row - 2][col - 2] === changePlayer &&\r\n        cell[row - 3][col - 3] === changePlayer) {\r\n        return 1\r\n      }\r\n      row--\r\n      col--\r\n    }\r\n    return 0\r\n  }\r\n\r\n  // Diagonal Left winning conditions\r\n  checkDiagonalLeft(row, col) {\r\n    let cell = this.state.cells\r\n    let changePlayer = this.state.player ? 2 : 1\r\n\r\n    while (row < 5 && col > 0) {\r\n      row++\r\n      col--\r\n    }\r\n\r\n    while (row >= 3 && col <= 3) {\r\n      if (cell[row][col] === changePlayer &&\r\n        cell[row - 1][col + 1] === changePlayer &&\r\n        cell[row - 2][col + 2] === changePlayer &&\r\n        cell[row - 3][col + 3] === changePlayer) {\r\n        return 1\r\n      }\r\n      row--\r\n      col++\r\n    }\r\n    return 0\r\n  }\r\n\r\n  checkVictory(row, col) {\r\n    return this.checkVertical(row, col) || this.checkHorizontal(row, col) || this.checkDiagonalRight(row, col) || this.checkDiagonalLeft(row, col)\r\n  }\r\n\r\n  // Reseting and restarting game\r\n  handleReset() {\r\n    let cells = [];\r\n    for (let i = 0; i < 6; i++) {\r\n      cells.push(new Array(7).fill(0));\r\n    }\r\n    this.setState({ cells, player: false, winner: 0 }) // Helping to reset the game from scratch\r\n  }\r\n\r\n  render() {\r\n    //console.log(this.state.cells);\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        <div className=\"form\">\r\n          <Card body inverse color=\"success\">\r\n            <CardHeader><h2 style={{ color: '#336E7B' }}>CONNECT 4</h2>\r\n              <div>\r\n                <h4>{this.state.winner > 0 ? this.state.winner === 1 ? <div className=\"yellowWinner\"><i className=\"trophyIcon fa fa-trophy\" style={{ fontSize: '70px', color: '#D4AF37' }}></i></div> : <div className=\"redWinner\"><i className=\"trophyIcon fa fa-trophy\" style={{ fontSize: '70px', color: '#D4AF37' }}></i></div> : this.state.player ? <div className=\"yellowTurn\"></div> : <div className=\"redTurn\"></div>} </h4>\r\n              </div>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Board cells={this.state.cells} handleClick={this.handleClick} />\r\n            </CardBody>\r\n            <CardFooter>\r\n              <Button color=\"success\" size=\"lg\" active onClick={this.handleReset.bind(this)}><i className=\"fa fa-refresh fa-spin\"></i></Button>\r\n            </CardFooter>\r\n          </Card>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}